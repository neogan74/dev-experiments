package main

import (
	"fmt"
)

// isValidSudoku проверяет, является ли доска судоку корректной.
func isValidSudoku(board [][]byte) bool {
	// Создаем массивы для отслеживания цифр по строкам, столбцам и блокам.
	var rows [9][9]bool
	var cols [9][9]bool
	var boxes [9][9]bool

	for i := 0; i < 9; i++ {
		for j := 0; j < 9; j++ {
			if board[i][j] == '.' {
				continue // пропускаем пустые ячейки
			}
			// Преобразуем символ в индекс от 0 до 8 ('1' → 0, '2' → 1, …, '9' → 8)
			num := board[i][j] - '1'
			// Определяем индекс блока 3×3
			boxIndex := (i/3)*3 + j/3
			// Если число уже встречалось в строке, столбце или блоке, доска некорректна
			if rows[i][num] || cols[j][num] || boxes[boxIndex][num] {
				return false
			}
			// Отмечаем, что число появилось в строке, столбце и блоке
			rows[i][num] = true
			cols[j][num] = true
			boxes[boxIndex][num] = true
		}
	}

	return true
}

func main() {
	// Пример корректной доски судоку:
	board := [][]byte{
		{'5', '3', '.', '.', '7', '.', '.', '.', '.'},
		{'6', '.', '.', '1', '9', '5', '.', '.', '.'},
		{'.', '9', '8', '.', '.', '.', '.', '6', '.'},
		{'8', '.', '.', '.', '6', '.', '.', '.', '3'},
		{'4', '.', '.', '8', '.', '3', '.', '.', '1'},
		{'7', '.', '.', '.', '2', '.', '.', '.', '6'},
		{'.', '6', '.', '.', '.', '.', '2', '8', '.'},
		{'.', '.', '.', '4', '1', '9', '.', '.', '5'},
		{'.', '.', '.', '.', '8', '.', '.', '7', '9'},
	}

	if isValidSudoku(board) {
		fmt.Println("Valid Sudoku")
	} else {
		fmt.Println("Invalid Sudoku")
	}
}
